# -*- coding: utf-8 -*-
"""content_based_recommender_approach1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X8NIjd_oLgODY4DX8WjRPh9bhtiXu9cT
"""

import numpy as np
import pandas as pd
import sklearn
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import linear_kernel
from Data_cleaning import *

"""Chúng ta sẽ lấy các dữ liệu về books, users, rating từ tập dự liệu Book-Crossing."""

#import books, users, ratings clean data
books, users, ratings = get_clean_data(path="/content/drive/My Drive/Colab Notebooks/recommendation_system/data/")

"""Đây là 5 record đầu về dữ liệu của các quyển sách."""

books.head()

"""Đây là dữ liệu user đánh giá các quyển sách."""

ratings.head()

"""Chúng ta sẽ đếm số rating mà mỗi quyển sách đã nhận được."""

#number of ratings received by each book
usersPerIsbn = ratings['isbn'].value_counts()
usersPerIsbn

"""Chúng ta sẽ loại bỏ những quyển sách có lượt rating ít hơn 10 ra khỏi dữ liệu."""

books_10 = books[books['isbn'].isin(usersPerIsbn[usersPerIsbn>10].index)]

"""Sử dụng TF-IDF cho trường tiêu đề của quyển sách."""

vectorizer = TfidfVectorizer(analyzer='word')
#build book-title tfidf matrix
tfidf_matrix = vectorizer.fit_transform(books_10['title'])
tfidf_feature_name = vectorizer.get_feature_names()
tfidf_matrix.shape

"""Sử dụng công thức cosin để tính khoảng cách giữa các item"""

# comping cosine similarity matrix using linear_kernal of sklearn
cosine_similarity = linear_kernel(tfidf_matrix, tfidf_matrix)

books_10 = books_10.reset_index(drop=True)

indices = pd.Series(books_10['title'].index)

#Function to get the most similar books
def recommend(index, method):
    id = indices[index]
    # Get the pairwise similarity scores of all books compared that book,
    # sorting them and getting top 5
    similarity_scores = list(enumerate(method[id]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    similarity_scores = similarity_scores[1:6]
    
    #Get the books index
    books_index = [i[0] for i in similarity_scores]
    
    #Return the top 5 most similar books using integar-location based indexing (iloc)
    return books_10['title'].iloc[books_index]

#input the index of the book
recommend(1000, cosine_similarity)

books_10.iloc[1000]